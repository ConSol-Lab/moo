@article{KLETZANDER2020104794,
title = {Solving the general employee scheduling problem},
journal = {Computers & Operations Research},
volume = {113},
pages = {104794},
year = {2020},
issn = {0305-0548},
doi = {https://doi.org/10.1016/j.cor.2019.104794},
url = {https://www.sciencedirect.com/science/article/pii/S0305054819302369},
http = {https://www.sciencedirect.com/science/article/pii/S0305054819302369},
author = {Lucas Kletzander and Nysret Musliu},
keywords = {Rostering, Task scheduling, Metaheuristics},
abstract = {In many professions the demand for work requires employees to work in different shifts to cover varying requirements including areas like health care, protection services, transportation, manufacturing or call centers. However, there are many constraints that need to be satisfied in order to create feasible schedules. The demands can be specified in various ways, different legal requirements need to be respected and employee satisfaction has to be taken into account. Therefore, automated solutions are mandatory to stay competitive. However, even then it is often hard to provide good solutions in reasonable time as many of the problems are NP-hard. While not each problem will require the whole set of available restrictions, it is cumbersome to develop a new specification format and corresponding solver for each problem. Often these can not be well applied to similar problems differing in some requirements. On the other hand it is a challenging task to provide a general formulation and solution methods that can solve large integrated problems, as even several sub-problems on their own are known to be NP-hard. Therefore a new framework is proposed for the general employee scheduling problem that allows the implementation of various heuristic algorithms and their application to a wide range of problems. This is realized by proposing a unified handling of constraints and the possibility to implement various moves that can be reused across different algorithms. Further, a new search method is developed and implemented in the framework. In order to show the applicability to a wide range of problems, we take different problems from literature that cover different types of demand and constraints, translate their instances to our formulation and apply our solver to those instances as well as our own instances with good results. For one problem class our framework could obtain better solutions for several benchmark instances.}
}